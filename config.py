auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
base_lr = 0.0001
custom_hooks = [
    dict(
        ema_type='mmdet.models.layers.ema.ExpMomentumEMA',
        momentum=0.0002,
        priority=49,
        type='mmengine.hooks.ema_hook.EMAHook',
        update_buffers=True),
    dict(
        switch_epoch=80,
        switch_pipeline=[
            dict(
                backend_args=None,
                type='mmcv.transforms.loading.LoadImageFromFile'),
            dict(
                type='mmdet.datasets.transforms.loading.LoadAnnotations',
                with_bbox=True),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.1,
                    2.0,
                ),
                resize_type='mmdet.datasets.transforms.transforms.Resize',
                scale=(
                    640,
                    640,
                ),
                type='mmcv.transforms.processing.RandomResize'),
            dict(
                crop_size=(
                    640,
                    640,
                ),
                type='mmdet.datasets.transforms.transforms.RandomCrop'),
            dict(
                type='mmdet.datasets.transforms.transforms.YOLOXHSVRandomAug'),
            dict(
                prob=0.5,
                type='mmdet.datasets.transforms.transforms.RandomFlip'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='mmdet.datasets.transforms.transforms.Pad'),
            dict(type='mmdet.datasets.transforms.formatting.PackDetInputs'),
        ],
        type='mmdet.engine.hooks.pipeline_switch_hook.PipelineSwitchHook'),
]
data_root = 'data/coco/'
dataset_type = 'mmdet.datasets.NursingDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=10, max_keep_ckpts=3, type='mmengine.hooks.CheckpointHook'),
    logger=dict(interval=50, type='mmengine.hooks.LoggerHook'),
    param_scheduler=dict(type='mmengine.hooks.ParamSchedulerHook'),
    sampler_seed=dict(type='mmengine.hooks.DistSamplerSeedHook'),
    timer=dict(type='mmengine.hooks.IterTimerHook'),
    visualization=dict(type='mmdet.engine.hooks.DetVisualizationHook'))
default_scope = None
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_scales = [
    (
        640,
        640,
    ),
    (
        320,
        320,
    ),
    (
        960,
        960,
    ),
]
interval = 10
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(
    by_epoch=True, type='mmengine.runner.LogProcessor', window_size=50)
max_epochs = 100
metainfo = dict(
    classes=(
        'nurse hand',
        'diaper',
        'tissue',
        'body',
        'bottle',
        'swab',
        'mouth',
        'navel',
        'baby eyes',
        'eyedrops',
        'support mat',
        'support bar',
        'restraint',
        'baby swaddle',
    ),
    palette=[
        (
            220,
            20,
            60,
        ),
        (
            119,
            11,
            32,
        ),
        (
            0,
            0,
            142,
        ),
        (
            0,
            0,
            230,
        ),
        (
            106,
            0,
            228,
        ),
        (
            0,
            60,
            100,
        ),
        (
            0,
            80,
            100,
        ),
        (
            0,
            0,
            70,
        ),
        (
            0,
            0,
            192,
        ),
        (
            250,
            170,
            30,
        ),
        (
            100,
            170,
            30,
        ),
        (
            220,
            220,
            0,
        ),
        (
            175,
            116,
            175,
        ),
        (
            250,
            0,
            30,
        ),
    ])
model = dict(
    backbone=dict(
        act_cfg=dict(inplace=True, type='torch.nn.modules.activation.SiLU'),
        arch='P5',
        channel_attention=True,
        deepen_factor=1,
        expand_ratio=0.5,
        norm_cfg=dict(type='torch.nn.SyncBatchNorm'),
        type='mmdet.models.backbones.cspnext.CSPNeXt',
        widen_factor=1),
    bbox_head=dict(
        act_cfg=dict(inplace=True, type='torch.nn.modules.activation.SiLU'),
        anchor_generator=dict(
            offset=0,
            strides=[
                8,
                16,
                32,
            ],
            type=
            'mmdet.models.task_modules.prior_generators.point_generator.MlvlPointGenerator'
        ),
        bbox_coder=dict(
            type=
            'mmdet.models.task_modules.coders.distance_point_bbox_coder.DistancePointBBoxCoder'
        ),
        exp_on_reg=True,
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(
            loss_weight=2.0, type='mmdet.models.losses.iou_loss.GIoULoss'),
        loss_cls=dict(
            beta=2.0,
            loss_weight=1.0,
            type='mmdet.models.losses.gfocal_loss.QualityFocalLoss',
            use_sigmoid=True),
        norm_cfg=dict(type='torch.nn.SyncBatchNorm'),
        num_classes=14,
        pred_kernel_size=1,
        share_conv=True,
        stacked_convs=2,
        type='mmdet.models.dense_heads.rtmdet_head.RTMDetSepBNHead',
        with_objectness=False),
    data_preprocessor=dict(
        batch_augments=None,
        bgr_to_rgb=False,
        mean=[
            103.53,
            116.28,
            123.675,
        ],
        std=[
            57.375,
            57.12,
            58.395,
        ],
        type=
        'mmdet.models.data_preprocessors.data_preprocessor.DetDataPreprocessor'
    ),
    neck=dict(
        act_cfg=dict(inplace=True, type='torch.nn.modules.activation.SiLU'),
        expand_ratio=0.5,
        in_channels=[
            256,
            512,
            1024,
        ],
        norm_cfg=dict(type='torch.nn.SyncBatchNorm'),
        num_csp_blocks=3,
        out_channels=256,
        type='mmdet.models.necks.cspnext_pafpn.CSPNeXtPAFPN'),
    test_cfg=dict(
        max_per_img=300,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.65, type='mmcv.ops.nms'),
        nms_pre=30000,
        score_thr=0.001),
    train_cfg=dict(
        allowed_border=-1,
        assigner=dict(
            topk=13,
            type=
            'mmdet.models.task_modules.assigners.dynamic_soft_label_assigner.DynamicSoftLabelAssigner'
        ),
        debug=False,
        pos_weight=-1),
    type='mmdet.models.detectors.rtmdet.RTMDet')
optim_wrapper = dict(
    optimizer=dict(
        lr=0.001, type='torch.optim.adamw.AdamW', weight_decay=0.05),
    paramwise_cfg=dict(
        bias_decay_mult=0, bypass_duplicate=True, norm_decay_mult=0),
    type='mmengine.optim.optimizer.optimizer_wrapper.OptimWrapper')
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=1000,
        start_factor=1e-05,
        type='mmengine.optim.scheduler.lr_scheduler.LinearLR'),
    dict(
        T_max=50,
        begin=50,
        by_epoch=True,
        convert_to_iter_based=True,
        end=100,
        eta_min=5e-05,
        type='mmengine.optim.scheduler.lr_scheduler.CosineAnnealingLR'),
]
resume = False
stage2_num_epochs = 20
test_cfg = dict(type='mmengine.runner.loops.TestLoop')
test_dataloader = dict(
    batch_size=5,
    dataset=dict(
        ann_file='annotations/val2017.json',
        backend_args=None,
        data_prefix=dict(img='val2017/'),
        data_root='data/coco/',
        metainfo=dict(
            classes=(
                'nurse hand',
                'diaper',
                'tissue',
                'body',
                'bottle',
                'swab',
                'mouth',
                'navel',
                'baby eyes',
                'eyedrops',
                'support mat',
                'support bar',
                'restraint',
                'baby swaddle',
            ),
            palette=[
                (
                    220,
                    20,
                    60,
                ),
                (
                    119,
                    11,
                    32,
                ),
                (
                    0,
                    0,
                    142,
                ),
                (
                    0,
                    0,
                    230,
                ),
                (
                    106,
                    0,
                    228,
                ),
                (
                    0,
                    60,
                    100,
                ),
                (
                    0,
                    80,
                    100,
                ),
                (
                    0,
                    0,
                    70,
                ),
                (
                    0,
                    0,
                    192,
                ),
                (
                    250,
                    170,
                    30,
                ),
                (
                    100,
                    170,
                    30,
                ),
                (
                    220,
                    220,
                    0,
                ),
                (
                    175,
                    116,
                    175,
                ),
                (
                    250,
                    0,
                    30,
                ),
            ]),
        pipeline=[
            dict(
                backend_args=None,
                type='mmcv.transforms.loading.LoadImageFromFile'),
            dict(
                keep_ratio=True,
                scale=(
                    640,
                    640,
                ),
                type='mmdet.datasets.transforms.transforms.Resize'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='mmdet.datasets.transforms.transforms.Pad'),
            dict(
                type='mmdet.datasets.transforms.loading.LoadAnnotations',
                with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='mmdet.datasets.transforms.formatting.PackDetInputs'),
        ],
        test_mode=True,
        type='mmdet.datasets.NursingDataset'),
    drop_last=False,
    num_workers=10,
    persistent_workers=True,
    sampler=dict(
        shuffle=False, type='mmengine.dataset.sampler.DefaultSampler'))
test_evaluator = dict(
    ann_file='data/coco/annotations/val2017.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    proposal_nums=(
        100,
        1,
        10,
    ),
    type='mmdet.evaluation.CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='mmcv.transforms.loading.LoadImageFromFile'),
    dict(
        keep_ratio=True,
        scale=(
            640,
            640,
        ),
        type='mmdet.datasets.transforms.transforms.Resize'),
    dict(
        pad_val=dict(img=(
            114,
            114,
            114,
        )),
        size=(
            640,
            640,
        ),
        type='mmdet.datasets.transforms.transforms.Pad'),
    dict(
        type='mmdet.datasets.transforms.loading.LoadAnnotations',
        with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='mmdet.datasets.transforms.formatting.PackDetInputs'),
]
train_cfg = dict(
    dynamic_intervals=[
        (
            80,
            1,
        ),
    ],
    max_epochs=100,
    type='mmengine.runner.loops.EpochBasedTrainLoop',
    val_interval=10)
train_dataloader = dict(
    batch_sampler=None,
    batch_size=32,
    dataset=dict(
        ann_file='annotations/train2017.json',
        backend_args=None,
        data_prefix=dict(img='train2017/'),
        data_root='data/coco/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(
            classes=(
                'nurse hand',
                'diaper',
                'tissue',
                'body',
                'bottle',
                'swab',
                'mouth',
                'navel',
                'baby eyes',
                'eyedrops',
                'support mat',
                'support bar',
                'restraint',
                'baby swaddle',
            ),
            palette=[
                (
                    220,
                    20,
                    60,
                ),
                (
                    119,
                    11,
                    32,
                ),
                (
                    0,
                    0,
                    142,
                ),
                (
                    0,
                    0,
                    230,
                ),
                (
                    106,
                    0,
                    228,
                ),
                (
                    0,
                    60,
                    100,
                ),
                (
                    0,
                    80,
                    100,
                ),
                (
                    0,
                    0,
                    70,
                ),
                (
                    0,
                    0,
                    192,
                ),
                (
                    250,
                    170,
                    30,
                ),
                (
                    100,
                    170,
                    30,
                ),
                (
                    220,
                    220,
                    0,
                ),
                (
                    175,
                    116,
                    175,
                ),
                (
                    250,
                    0,
                    30,
                ),
            ]),
        pipeline=[
            dict(
                backend_args=None,
                type='mmcv.transforms.loading.LoadImageFromFile'),
            dict(
                type='mmdet.datasets.transforms.loading.LoadAnnotations',
                with_bbox=True),
            dict(
                img_scale=(
                    640,
                    640,
                ),
                pad_val=114.0,
                type='mmdet.datasets.transforms.transforms.CachedMosaic'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.1,
                    2.0,
                ),
                resize_type='mmdet.datasets.transforms.transforms.Resize',
                scale=(
                    1280,
                    1280,
                ),
                type='mmcv.transforms.processing.RandomResize'),
            dict(
                crop_size=(
                    640,
                    640,
                ),
                type='mmdet.datasets.transforms.transforms.RandomCrop'),
            dict(
                type='mmdet.datasets.transforms.transforms.YOLOXHSVRandomAug'),
            dict(
                prob=0.5,
                type='mmdet.datasets.transforms.transforms.RandomFlip'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='mmdet.datasets.transforms.transforms.Pad'),
            dict(
                img_scale=(
                    640,
                    640,
                ),
                max_cached_images=20,
                pad_val=(
                    114,
                    114,
                    114,
                ),
                ratio_range=(
                    1.0,
                    1.0,
                ),
                type='mmdet.datasets.transforms.transforms.CachedMixUp'),
            dict(type='mmdet.datasets.transforms.formatting.PackDetInputs'),
        ],
        type='mmdet.datasets.NursingDataset'),
    num_workers=10,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='mmengine.dataset.sampler.DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='mmcv.transforms.loading.LoadImageFromFile'),
    dict(
        type='mmdet.datasets.transforms.loading.LoadAnnotations',
        with_bbox=True),
    dict(
        img_scale=(
            640,
            640,
        ),
        pad_val=114.0,
        type='mmdet.datasets.transforms.transforms.CachedMosaic'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.1,
            2.0,
        ),
        resize_type='mmdet.datasets.transforms.transforms.Resize',
        scale=(
            1280,
            1280,
        ),
        type='mmcv.transforms.processing.RandomResize'),
    dict(
        crop_size=(
            640,
            640,
        ),
        type='mmdet.datasets.transforms.transforms.RandomCrop'),
    dict(type='mmdet.datasets.transforms.transforms.YOLOXHSVRandomAug'),
    dict(prob=0.5, type='mmdet.datasets.transforms.transforms.RandomFlip'),
    dict(
        pad_val=dict(img=(
            114,
            114,
            114,
        )),
        size=(
            640,
            640,
        ),
        type='mmdet.datasets.transforms.transforms.Pad'),
    dict(
        img_scale=(
            640,
            640,
        ),
        max_cached_images=20,
        pad_val=(
            114,
            114,
            114,
        ),
        ratio_range=(
            1.0,
            1.0,
        ),
        type='mmdet.datasets.transforms.transforms.CachedMixUp'),
    dict(type='mmdet.datasets.transforms.formatting.PackDetInputs'),
]
train_pipeline_stage2 = [
    dict(backend_args=None, type='mmcv.transforms.loading.LoadImageFromFile'),
    dict(
        type='mmdet.datasets.transforms.loading.LoadAnnotations',
        with_bbox=True),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.1,
            2.0,
        ),
        resize_type='mmdet.datasets.transforms.transforms.Resize',
        scale=(
            640,
            640,
        ),
        type='mmcv.transforms.processing.RandomResize'),
    dict(
        crop_size=(
            640,
            640,
        ),
        type='mmdet.datasets.transforms.transforms.RandomCrop'),
    dict(type='mmdet.datasets.transforms.transforms.YOLOXHSVRandomAug'),
    dict(prob=0.5, type='mmdet.datasets.transforms.transforms.RandomFlip'),
    dict(
        pad_val=dict(img=(
            114,
            114,
            114,
        )),
        size=(
            640,
            640,
        ),
        type='mmdet.datasets.transforms.transforms.Pad'),
    dict(type='mmdet.datasets.transforms.formatting.PackDetInputs'),
]
tta_model = dict(
    tta_cfg=dict(max_per_img=100, nms=dict(iou_threshold=0.6, type='nms')),
    type='mmdet.models.test_time_augs.det_tta.DetTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='mmcv.transforms.loading.LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(
                    keep_ratio=True,
                    scale=(
                        640,
                        640,
                    ),
                    type='mmdet.datasets.transforms.transforms.Resize'),
                dict(
                    keep_ratio=True,
                    scale=(
                        320,
                        320,
                    ),
                    type='mmdet.datasets.transforms.transforms.Resize'),
                dict(
                    keep_ratio=True,
                    scale=(
                        960,
                        960,
                    ),
                    type='mmdet.datasets.transforms.transforms.Resize'),
            ],
            [
                dict(
                    prob=1.0,
                    type='mmdet.datasets.transforms.transforms.RandomFlip'),
                dict(
                    prob=0.0,
                    type='mmdet.datasets.transforms.transforms.RandomFlip'),
            ],
            [
                dict(
                    pad_val=dict(img=(
                        114,
                        114,
                        114,
                    )),
                    size=(
                        960,
                        960,
                    ),
                    type='mmdet.datasets.transforms.transforms.Pad'),
            ],
            [
                dict(
                    type='mmdet.datasets.transforms.loading.LoadAnnotations',
                    with_bbox=True),
            ],
            [
                dict(
                    meta_keys=(
                        'img_id',
                        'img_path',
                        'ori_shape',
                        'img_shape',
                        'scale_factor',
                        'flip',
                        'flip_direction',
                    ),
                    type='mmdet.datasets.transforms.formatting.PackDetInputs'),
            ],
        ],
        type='mmcv.transforms.processing.TestTimeAug'),
]
val_cfg = dict(type='mmengine.runner.loops.ValLoop')
val_dataloader = dict(
    batch_size=5,
    dataset=dict(
        ann_file='annotations/val2017.json',
        backend_args=None,
        data_prefix=dict(img='val2017/'),
        data_root='data/coco/',
        metainfo=dict(
            classes=(
                'nurse hand',
                'diaper',
                'tissue',
                'body',
                'bottle',
                'swab',
                'mouth',
                'navel',
                'baby eyes',
                'eyedrops',
                'support mat',
                'support bar',
                'restraint',
                'baby swaddle',
            ),
            palette=[
                (
                    220,
                    20,
                    60,
                ),
                (
                    119,
                    11,
                    32,
                ),
                (
                    0,
                    0,
                    142,
                ),
                (
                    0,
                    0,
                    230,
                ),
                (
                    106,
                    0,
                    228,
                ),
                (
                    0,
                    60,
                    100,
                ),
                (
                    0,
                    80,
                    100,
                ),
                (
                    0,
                    0,
                    70,
                ),
                (
                    0,
                    0,
                    192,
                ),
                (
                    250,
                    170,
                    30,
                ),
                (
                    100,
                    170,
                    30,
                ),
                (
                    220,
                    220,
                    0,
                ),
                (
                    175,
                    116,
                    175,
                ),
                (
                    250,
                    0,
                    30,
                ),
            ]),
        pipeline=[
            dict(
                backend_args=None,
                type='mmcv.transforms.loading.LoadImageFromFile'),
            dict(
                keep_ratio=True,
                scale=(
                    640,
                    640,
                ),
                type='mmdet.datasets.transforms.transforms.Resize'),
            dict(
                pad_val=dict(img=(
                    114,
                    114,
                    114,
                )),
                size=(
                    640,
                    640,
                ),
                type='mmdet.datasets.transforms.transforms.Pad'),
            dict(
                type='mmdet.datasets.transforms.loading.LoadAnnotations',
                with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='mmdet.datasets.transforms.formatting.PackDetInputs'),
        ],
        test_mode=True,
        type='mmdet.datasets.NursingDataset'),
    drop_last=False,
    num_workers=10,
    persistent_workers=True,
    sampler=dict(
        shuffle=False, type='mmengine.dataset.sampler.DefaultSampler'))
val_evaluator = dict(
    ann_file='data/coco/annotations/instances_val2017.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    proposal_nums=(
        100,
        1,
        10,
    ),
    type='mmdet.evaluation.CocoMetric')
vis_backends = [
    dict(type='mmengine.visualization.LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='mmdet.visualization.DetLocalVisualizer',
    vis_backends=[
        dict(type='mmengine.visualization.LocalVisBackend'),
    ])
work_dir = './work_dirs\\rtmdet_l_8xb32_300e_coco'
